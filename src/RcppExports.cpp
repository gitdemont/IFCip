// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_background
Rcpp::NumericVector cpp_background(const Rcpp::NumericMatrix img, const R_len_t margin, const R_len_t extra, const bool is_cif);
RcppExport SEXP _IFCip_cpp_background(SEXP imgSEXP, SEXP marginSEXP, SEXP extraSEXP, SEXP is_cifSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const R_len_t >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< const R_len_t >::type extra(extraSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_cif(is_cifSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_background(img, margin, extra, is_cif));
    return rcpp_result_gen;
END_RCPP
}
// cpp_antipodalpairs
Rcpp::IntegerMatrix cpp_antipodalpairs(const Rcpp::NumericMatrix pts);
RcppExport SEXP _IFCip_cpp_antipodalpairs(SEXP ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type pts(ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_antipodalpairs(pts));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bbox
Rcpp::NumericVector cpp_bbox(const Rcpp::NumericMatrix pts, const double scale);
RcppExport SEXP _IFCip_cpp_bbox(SEXP ptsSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bbox(pts, scale));
    return rcpp_result_gen;
END_RCPP
}
// cpp_R_shift_M
Rcpp::IntegerMatrix cpp_R_shift_M(const Rcpp::IntegerMatrix mat, const uint8_t bits);
RcppExport SEXP _IFCip_cpp_R_shift_M(SEXP matSEXP, SEXP bitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type bits(bitsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_R_shift_M(mat, bits));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rescale_M
Rcpp::IntegerMatrix cpp_rescale_M(const Rcpp::NumericMatrix mat, const uint8_t bits);
RcppExport SEXP _IFCip_cpp_rescale_M(SEXP matSEXP, SEXP bitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type bits(bitsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rescale_M(mat, bits));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cooc
Rcpp::List cpp_cooc(const Rcpp::IntegerMatrix img, const Rcpp::LogicalMatrix msk, const uint8_t delta);
RcppExport SEXP _IFCip_cpp_cooc(SEXP imgSEXP, SEXP mskSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix >::type msk(mskSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cooc(img, msk, delta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_h_features
Rcpp::NumericVector cpp_h_features(const Rcpp::NumericMatrix cooc, const bool invariant);
RcppExport SEXP _IFCip_cpp_h_features(SEXP coocSEXP, SEXP invariantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type cooc(coocSEXP);
    Rcpp::traits::input_parameter< const bool >::type invariant(invariantSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_h_features(cooc, invariant));
    return rcpp_result_gen;
END_RCPP
}
// cpp_centroid
Rcpp::NumericVector cpp_centroid(const Rcpp::NumericMatrix img);
RcppExport SEXP _IFCip_cpp_centroid(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_centroid(img));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rmoment
Rcpp::NumericVector cpp_rmoment(const Rcpp::NumericMatrix img, const uint8_t p, const uint8_t q);
RcppExport SEXP _IFCip_cpp_rmoment(SEXP imgSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rmoment(img, p, q));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cmoment
Rcpp::NumericVector cpp_cmoment(const Rcpp::NumericMatrix img, const double cx, const double cy, const uint8_t p, const uint8_t q);
RcppExport SEXP _IFCip_cpp_cmoment(SEXP imgSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const double >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< const double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type p(pSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cmoment(img, cx, cy, p, q));
    return rcpp_result_gen;
END_RCPP
}
// cpp_features_hu1
Rcpp::NumericVector cpp_features_hu1(const Rcpp::NumericMatrix img, const double mag);
RcppExport SEXP _IFCip_cpp_features_hu1(SEXP imgSEXP, SEXP magSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const double >::type mag(magSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_features_hu1(img, mag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_features_hu2
Rcpp::NumericVector cpp_features_hu2(const Rcpp::NumericMatrix img, const double mag);
RcppExport SEXP _IFCip_cpp_features_hu2(SEXP imgSEXP, SEXP magSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const double >::type mag(magSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_features_hu2(img, mag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_basic
Rcpp::NumericVector cpp_basic(const Rcpp::NumericMatrix img, const Rcpp::NumericMatrix msk, const double mag);
RcppExport SEXP _IFCip_cpp_basic(SEXP imgSEXP, SEXP mskSEXP, SEXP magSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type msk(mskSEXP);
    Rcpp::traits::input_parameter< const double >::type mag(magSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_basic(img, msk, mag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_features_hu3
Rcpp::NumericMatrix cpp_features_hu3(const Rcpp::NumericMatrix img, const Rcpp::IntegerMatrix msk, const unsigned int components, const double mag);
RcppExport SEXP _IFCip_cpp_features_hu3(SEXP imgSEXP, SEXP mskSEXP, SEXP componentsSEXP, SEXP magSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type msk(mskSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< const double >::type mag(magSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_features_hu3(img, msk, components, mag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_multi_otsu
Rcpp::NumericVector cpp_multi_otsu(const Rcpp::NumericMatrix img, const uint8_t n_comp, const unsigned short n_lev);
RcppExport SEXP _IFCip_cpp_multi_otsu(SEXP imgSEXP, SEXP n_compSEXP, SEXP n_levSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type n_comp(n_compSEXP);
    Rcpp::traits::input_parameter< const unsigned short >::type n_lev(n_levSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_multi_otsu(img, n_comp, n_lev));
    return rcpp_result_gen;
END_RCPP
}
// cpp_distance_eucl
Rcpp::NumericMatrix cpp_distance_eucl(const Rcpp::IntegerMatrix msk);
RcppExport SEXP _IFCip_cpp_distance_eucl(SEXP mskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type msk(mskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_distance_eucl(msk));
    return rcpp_result_gen;
END_RCPP
}
// cpp_distance_eucl_norm
Rcpp::NumericMatrix cpp_distance_eucl_norm(const Rcpp::IntegerMatrix msk);
RcppExport SEXP _IFCip_cpp_distance_eucl_norm(SEXP mskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type msk(mskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_distance_eucl_norm(msk));
    return rcpp_result_gen;
END_RCPP
}
// cpp_distance_manh
Rcpp::NumericMatrix cpp_distance_manh(const Rcpp::IntegerMatrix msk);
RcppExport SEXP _IFCip_cpp_distance_manh(SEXP mskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type msk(mskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_distance_manh(msk));
    return rcpp_result_gen;
END_RCPP
}
// cpp_distance_manh_norm
Rcpp::NumericMatrix cpp_distance_manh_norm(const Rcpp::IntegerMatrix msk);
RcppExport SEXP _IFCip_cpp_distance_manh_norm(SEXP mskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type msk(mskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_distance_manh_norm(msk));
    return rcpp_result_gen;
END_RCPP
}
// cpp_disttrans_manh
Rcpp::NumericMatrix cpp_disttrans_manh(const Rcpp::NumericMatrix img);
RcppExport SEXP _IFCip_cpp_disttrans_manh(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_disttrans_manh(img));
    return rcpp_result_gen;
END_RCPP
}
// cpp_disttrans_eucl
Rcpp::NumericMatrix cpp_disttrans_eucl(const Rcpp::NumericMatrix img);
RcppExport SEXP _IFCip_cpp_disttrans_eucl(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_disttrans_eucl(img));
    return rcpp_result_gen;
END_RCPP
}
// cpp_voronoi_eucl
Rcpp::IntegerMatrix cpp_voronoi_eucl(const Rcpp::IntegerMatrix img);
RcppExport SEXP _IFCip_cpp_voronoi_eucl(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_voronoi_eucl(img));
    return rcpp_result_gen;
END_RCPP
}
// cpp_voronoi_manh
Rcpp::IntegerMatrix cpp_voronoi_manh(const Rcpp::IntegerMatrix img);
RcppExport SEXP _IFCip_cpp_voronoi_manh(SEXP imgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type img(imgSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_voronoi_manh(img));
    return rcpp_result_gen;
END_RCPP
}
// cpp_zernike1
Rcpp::List cpp_zernike1(const Rcpp::NumericMatrix img, const double cx, const double cy, const uint8_t nmax, const double radius);
RcppExport SEXP _IFCip_cpp_zernike1(SEXP imgSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP nmaxSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const double >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< const double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_zernike1(img, cx, cy, nmax, radius));
    return rcpp_result_gen;
END_RCPP
}
// cpp_zernike2
Rcpp::List cpp_zernike2(const Rcpp::NumericMatrix img, const double cx, const double cy, const uint8_t nmax, const double radius);
RcppExport SEXP _IFCip_cpp_zernike2(SEXP imgSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP nmaxSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const double >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< const double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_zernike2(img, cx, cy, nmax, radius));
    return rcpp_result_gen;
END_RCPP
}
// cpp_AND_M
Rcpp::LogicalMatrix cpp_AND_M(const Rcpp::List list);
RcppExport SEXP _IFCip_cpp_AND_M(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_AND_M(list));
    return rcpp_result_gen;
END_RCPP
}
// cpp_OR_M
Rcpp::LogicalMatrix cpp_OR_M(const Rcpp::List list);
RcppExport SEXP _IFCip_cpp_OR_M(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_OR_M(list));
    return rcpp_result_gen;
END_RCPP
}
// cpp_NEG_M
Rcpp::LogicalMatrix cpp_NEG_M(const Rcpp::LogicalMatrix mat);
RcppExport SEXP _IFCip_cpp_NEG_M(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_NEG_M(mat));
    return rcpp_result_gen;
END_RCPP
}
// cpp_k_equal_M
Rcpp::LogicalMatrix cpp_k_equal_M(const Rcpp::NumericMatrix mat, const double k);
RcppExport SEXP _IFCip_cpp_k_equal_M(SEXP matSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_k_equal_M(mat, k));
    return rcpp_result_gen;
END_RCPP
}
// cpp_k_sup_equal_M
Rcpp::LogicalMatrix cpp_k_sup_equal_M(const Rcpp::NumericMatrix mat, const double k);
RcppExport SEXP _IFCip_cpp_k_sup_equal_M(SEXP matSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_k_sup_equal_M(mat, k));
    return rcpp_result_gen;
END_RCPP
}
// cpp_k_inf_equal_M
Rcpp::LogicalMatrix cpp_k_inf_equal_M(const Rcpp::NumericMatrix mat, const double k);
RcppExport SEXP _IFCip_cpp_k_inf_equal_M(SEXP matSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_k_inf_equal_M(mat, k));
    return rcpp_result_gen;
END_RCPP
}
// cpp_shift
Rcpp::NumericMatrix cpp_shift(const Rcpp::NumericMatrix mat, const int d_row, const int d_col, const bool add_noise, const double bg, const double sd);
RcppExport SEXP _IFCip_cpp_shift(SEXP matSEXP, SEXP d_rowSEXP, SEXP d_colSEXP, SEXP add_noiseSEXP, SEXP bgSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const int >::type d_row(d_rowSEXP);
    Rcpp::traits::input_parameter< const int >::type d_col(d_colSEXP);
    Rcpp::traits::input_parameter< const bool >::type add_noise(add_noiseSEXP);
    Rcpp::traits::input_parameter< const double >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< const double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_shift(mat, d_row, d_col, add_noise, bg, sd));
    return rcpp_result_gen;
END_RCPP
}
// cpp_flip
Rcpp::NumericMatrix cpp_flip(const Rcpp::NumericMatrix mat, const bool which);
RcppExport SEXP _IFCip_cpp_flip(SEXP matSEXP, SEXP whichSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const bool >::type which(whichSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_flip(mat, which));
    return rcpp_result_gen;
END_RCPP
}
// cpp_padding
Rcpp::List cpp_padding(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t method, const double k);
RcppExport SEXP _IFCip_cpp_padding(SEXP matSEXP, SEXP kernelSEXP, SEXP methodSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_padding(mat, kernel, method, k));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sd
Rcpp::NumericMatrix cpp_sd(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel);
RcppExport SEXP _IFCip_cpp_sd(SEXP matSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sd(mat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// cpp_median
Rcpp::NumericMatrix cpp_median(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel);
RcppExport SEXP _IFCip_cpp_median(SEXP matSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_median(mat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mode
Rcpp::NumericMatrix cpp_mode(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel);
RcppExport SEXP _IFCip_cpp_mode(SEXP matSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mode(mat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mid
Rcpp::NumericMatrix cpp_mid(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel);
RcppExport SEXP _IFCip_cpp_mid(SEXP matSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mid(mat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// cpp_convolve2d
Rcpp::NumericMatrix cpp_convolve2d(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel);
RcppExport SEXP _IFCip_cpp_convolve2d(SEXP matSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_convolve2d(mat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// cpp_correlate2d
Rcpp::NumericMatrix cpp_correlate2d(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel);
RcppExport SEXP _IFCip_cpp_correlate2d(SEXP matSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_correlate2d(mat, kernel));
    return rcpp_result_gen;
END_RCPP
}
// cpp_erode
Rcpp::NumericMatrix cpp_erode(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_erode(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_erode(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dilate
Rcpp::NumericMatrix cpp_dilate(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_dilate(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dilate(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_opening
Rcpp::NumericMatrix cpp_opening(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_opening(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_opening(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_closing
Rcpp::NumericMatrix cpp_closing(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_closing(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_closing(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradient
Rcpp::NumericMatrix cpp_gradient(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_gradient(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradient(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tophat_white
Rcpp::NumericMatrix cpp_tophat_white(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_tophat_white(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tophat_white(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tophat_black
Rcpp::NumericMatrix cpp_tophat_black(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_tophat_black(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tophat_black(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tophat_self
Rcpp::NumericMatrix cpp_tophat_self(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_tophat_self(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tophat_self(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cont
Rcpp::NumericMatrix cpp_cont(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_cont(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cont(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_laplacian
Rcpp::NumericMatrix cpp_laplacian(const Rcpp::NumericMatrix mat, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_laplacian(SEXP matSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_laplacian(mat, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_watershed_sv1
Rcpp::IntegerVector cpp_watershed_sv1(const Rcpp::NumericMatrix mat, const uint8_t connectivity, const unsigned short n_lev, const bool ws_draw, const uint8_t ws_dilate);
RcppExport SEXP _IFCip_cpp_watershed_sv1(SEXP matSEXP, SEXP connectivitySEXP, SEXP n_levSEXP, SEXP ws_drawSEXP, SEXP ws_dilateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type connectivity(connectivitySEXP);
    Rcpp::traits::input_parameter< const unsigned short >::type n_lev(n_levSEXP);
    Rcpp::traits::input_parameter< const bool >::type ws_draw(ws_drawSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type ws_dilate(ws_dilateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_watershed_sv1(mat, connectivity, n_lev, ws_draw, ws_dilate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_watershed_sv2
Rcpp::IntegerVector cpp_watershed_sv2(const Rcpp::NumericMatrix mat, const uint8_t connectivity, const unsigned short n_lev, const bool ws_draw, const uint8_t ws_dilate);
RcppExport SEXP _IFCip_cpp_watershed_sv2(SEXP matSEXP, SEXP connectivitySEXP, SEXP n_levSEXP, SEXP ws_drawSEXP, SEXP ws_dilateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type connectivity(connectivitySEXP);
    Rcpp::traits::input_parameter< const unsigned short >::type n_lev(n_levSEXP);
    Rcpp::traits::input_parameter< const bool >::type ws_draw(ws_drawSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type ws_dilate(ws_dilateSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_watershed_sv2(mat, connectivity, n_lev, ws_draw, ws_dilate));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ctl
Rcpp::List cpp_ctl(const Rcpp::LogicalMatrix mat, const bool global);
RcppExport SEXP _IFCip_cpp_ctl(SEXP matSEXP, SEXP globalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const bool >::type global(globalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ctl(mat, global));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fill
Rcpp::IntegerMatrix cpp_fill(const List ctl, const uint32_t label, const bool inner, const bool outer);
RcppExport SEXP _IFCip_cpp_fill(SEXP ctlSEXP, SEXP labelSEXP, SEXP innerSEXP, SEXP outerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type ctl(ctlSEXP);
    Rcpp::traits::input_parameter< const uint32_t >::type label(labelSEXP);
    Rcpp::traits::input_parameter< const bool >::type inner(innerSEXP);
    Rcpp::traits::input_parameter< const bool >::type outer(outerSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fill(ctl, label, inner, outer));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fill_out
Rcpp::IntegerMatrix cpp_fill_out(const List ctl);
RcppExport SEXP _IFCip_cpp_fill_out(SEXP ctlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type ctl(ctlSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fill_out(ctl));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dilate_ctl
Rcpp::NumericMatrix cpp_dilate_ctl(const List ctl, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_dilate_ctl(SEXP ctlSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type ctl(ctlSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dilate_ctl(ctl, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_erode_ctl
Rcpp::NumericMatrix cpp_erode_ctl(const List ctl, const Rcpp::NumericMatrix kernel, const uint8_t iter);
RcppExport SEXP _IFCip_cpp_erode_ctl(SEXP ctlSEXP, SEXP kernelSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type ctl(ctlSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const uint8_t >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_erode_ctl(ctl, kernel, iter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_threshold
Rcpp::LogicalMatrix cpp_threshold(const Rcpp::NumericMatrix img, const Rcpp::NumericMatrix msk, const double k, uint8_t removal);
RcppExport SEXP _IFCip_cpp_threshold(SEXP imgSEXP, SEXP mskSEXP, SEXP kSEXP, SEXP removalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img(imgSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type msk(mskSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type removal(removalSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_threshold(img, msk, k, removal));
    return rcpp_result_gen;
END_RCPP
}
// cpp_thinning_zs
Rcpp::LogicalMatrix cpp_thinning_zs(const Rcpp::LogicalMatrix mat);
RcppExport SEXP _IFCip_cpp_thinning_zs(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_thinning_zs(mat));
    return rcpp_result_gen;
END_RCPP
}
// cpp_thinning_bst
Rcpp::LogicalMatrix cpp_thinning_bst(const Rcpp::LogicalMatrix mat);
RcppExport SEXP _IFCip_cpp_thinning_bst(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_thinning_bst(mat));
    return rcpp_result_gen;
END_RCPP
}
// cpp_similarity
double cpp_similarity(const Rcpp::NumericMatrix img1, const Rcpp::NumericMatrix img2, const Rcpp::LogicalMatrix msk);
RcppExport SEXP _IFCip_cpp_similarity(SEXP img1SEXP, SEXP img2SEXP, SEXP mskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img1(img1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type img2(img2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix >::type msk(mskSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_similarity(img1, img2, msk));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_disc
Rcpp::LogicalMatrix cpp_make_disc(const uint8_t size);
RcppExport SEXP _IFCip_cpp_make_disc(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint8_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_disc(size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_box
Rcpp::LogicalMatrix cpp_make_box(const uint8_t size);
RcppExport SEXP _IFCip_cpp_make_box(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint8_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_box(size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_plus
Rcpp::LogicalMatrix cpp_make_plus(const uint8_t size);
RcppExport SEXP _IFCip_cpp_make_plus(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint8_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_plus(size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_cross
Rcpp::LogicalMatrix cpp_make_cross(const uint8_t size);
RcppExport SEXP _IFCip_cpp_make_cross(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint8_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_cross(size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_diamond
Rcpp::LogicalMatrix cpp_make_diamond(const uint8_t size);
RcppExport SEXP _IFCip_cpp_make_diamond(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint8_t >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_diamond(size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_convexhull
Rcpp::NumericMatrix cpp_convexhull(const Rcpp::NumericMatrix pts);
RcppExport SEXP _IFCip_cpp_convexhull(SEXP ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type pts(ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_convexhull(pts));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IFCip_cpp_background", (DL_FUNC) &_IFCip_cpp_background, 4},
    {"_IFCip_cpp_antipodalpairs", (DL_FUNC) &_IFCip_cpp_antipodalpairs, 1},
    {"_IFCip_cpp_bbox", (DL_FUNC) &_IFCip_cpp_bbox, 2},
    {"_IFCip_cpp_R_shift_M", (DL_FUNC) &_IFCip_cpp_R_shift_M, 2},
    {"_IFCip_cpp_rescale_M", (DL_FUNC) &_IFCip_cpp_rescale_M, 2},
    {"_IFCip_cpp_cooc", (DL_FUNC) &_IFCip_cpp_cooc, 3},
    {"_IFCip_cpp_h_features", (DL_FUNC) &_IFCip_cpp_h_features, 2},
    {"_IFCip_cpp_centroid", (DL_FUNC) &_IFCip_cpp_centroid, 1},
    {"_IFCip_cpp_rmoment", (DL_FUNC) &_IFCip_cpp_rmoment, 3},
    {"_IFCip_cpp_cmoment", (DL_FUNC) &_IFCip_cpp_cmoment, 5},
    {"_IFCip_cpp_features_hu1", (DL_FUNC) &_IFCip_cpp_features_hu1, 2},
    {"_IFCip_cpp_features_hu2", (DL_FUNC) &_IFCip_cpp_features_hu2, 2},
    {"_IFCip_cpp_basic", (DL_FUNC) &_IFCip_cpp_basic, 3},
    {"_IFCip_cpp_features_hu3", (DL_FUNC) &_IFCip_cpp_features_hu3, 4},
    {"_IFCip_cpp_multi_otsu", (DL_FUNC) &_IFCip_cpp_multi_otsu, 3},
    {"_IFCip_cpp_distance_eucl", (DL_FUNC) &_IFCip_cpp_distance_eucl, 1},
    {"_IFCip_cpp_distance_eucl_norm", (DL_FUNC) &_IFCip_cpp_distance_eucl_norm, 1},
    {"_IFCip_cpp_distance_manh", (DL_FUNC) &_IFCip_cpp_distance_manh, 1},
    {"_IFCip_cpp_distance_manh_norm", (DL_FUNC) &_IFCip_cpp_distance_manh_norm, 1},
    {"_IFCip_cpp_disttrans_manh", (DL_FUNC) &_IFCip_cpp_disttrans_manh, 1},
    {"_IFCip_cpp_disttrans_eucl", (DL_FUNC) &_IFCip_cpp_disttrans_eucl, 1},
    {"_IFCip_cpp_voronoi_eucl", (DL_FUNC) &_IFCip_cpp_voronoi_eucl, 1},
    {"_IFCip_cpp_voronoi_manh", (DL_FUNC) &_IFCip_cpp_voronoi_manh, 1},
    {"_IFCip_cpp_zernike1", (DL_FUNC) &_IFCip_cpp_zernike1, 5},
    {"_IFCip_cpp_zernike2", (DL_FUNC) &_IFCip_cpp_zernike2, 5},
    {"_IFCip_cpp_AND_M", (DL_FUNC) &_IFCip_cpp_AND_M, 1},
    {"_IFCip_cpp_OR_M", (DL_FUNC) &_IFCip_cpp_OR_M, 1},
    {"_IFCip_cpp_NEG_M", (DL_FUNC) &_IFCip_cpp_NEG_M, 1},
    {"_IFCip_cpp_k_equal_M", (DL_FUNC) &_IFCip_cpp_k_equal_M, 2},
    {"_IFCip_cpp_k_sup_equal_M", (DL_FUNC) &_IFCip_cpp_k_sup_equal_M, 2},
    {"_IFCip_cpp_k_inf_equal_M", (DL_FUNC) &_IFCip_cpp_k_inf_equal_M, 2},
    {"_IFCip_cpp_shift", (DL_FUNC) &_IFCip_cpp_shift, 6},
    {"_IFCip_cpp_flip", (DL_FUNC) &_IFCip_cpp_flip, 2},
    {"_IFCip_cpp_padding", (DL_FUNC) &_IFCip_cpp_padding, 4},
    {"_IFCip_cpp_sd", (DL_FUNC) &_IFCip_cpp_sd, 2},
    {"_IFCip_cpp_median", (DL_FUNC) &_IFCip_cpp_median, 2},
    {"_IFCip_cpp_mode", (DL_FUNC) &_IFCip_cpp_mode, 2},
    {"_IFCip_cpp_mid", (DL_FUNC) &_IFCip_cpp_mid, 2},
    {"_IFCip_cpp_convolve2d", (DL_FUNC) &_IFCip_cpp_convolve2d, 2},
    {"_IFCip_cpp_correlate2d", (DL_FUNC) &_IFCip_cpp_correlate2d, 2},
    {"_IFCip_cpp_erode", (DL_FUNC) &_IFCip_cpp_erode, 3},
    {"_IFCip_cpp_dilate", (DL_FUNC) &_IFCip_cpp_dilate, 3},
    {"_IFCip_cpp_opening", (DL_FUNC) &_IFCip_cpp_opening, 3},
    {"_IFCip_cpp_closing", (DL_FUNC) &_IFCip_cpp_closing, 3},
    {"_IFCip_cpp_gradient", (DL_FUNC) &_IFCip_cpp_gradient, 3},
    {"_IFCip_cpp_tophat_white", (DL_FUNC) &_IFCip_cpp_tophat_white, 3},
    {"_IFCip_cpp_tophat_black", (DL_FUNC) &_IFCip_cpp_tophat_black, 3},
    {"_IFCip_cpp_tophat_self", (DL_FUNC) &_IFCip_cpp_tophat_self, 3},
    {"_IFCip_cpp_cont", (DL_FUNC) &_IFCip_cpp_cont, 3},
    {"_IFCip_cpp_laplacian", (DL_FUNC) &_IFCip_cpp_laplacian, 3},
    {"_IFCip_cpp_watershed_sv1", (DL_FUNC) &_IFCip_cpp_watershed_sv1, 5},
    {"_IFCip_cpp_watershed_sv2", (DL_FUNC) &_IFCip_cpp_watershed_sv2, 5},
    {"_IFCip_cpp_ctl", (DL_FUNC) &_IFCip_cpp_ctl, 2},
    {"_IFCip_cpp_fill", (DL_FUNC) &_IFCip_cpp_fill, 4},
    {"_IFCip_cpp_fill_out", (DL_FUNC) &_IFCip_cpp_fill_out, 1},
    {"_IFCip_cpp_dilate_ctl", (DL_FUNC) &_IFCip_cpp_dilate_ctl, 3},
    {"_IFCip_cpp_erode_ctl", (DL_FUNC) &_IFCip_cpp_erode_ctl, 3},
    {"_IFCip_cpp_threshold", (DL_FUNC) &_IFCip_cpp_threshold, 4},
    {"_IFCip_cpp_thinning_zs", (DL_FUNC) &_IFCip_cpp_thinning_zs, 1},
    {"_IFCip_cpp_thinning_bst", (DL_FUNC) &_IFCip_cpp_thinning_bst, 1},
    {"_IFCip_cpp_similarity", (DL_FUNC) &_IFCip_cpp_similarity, 3},
    {"_IFCip_cpp_make_disc", (DL_FUNC) &_IFCip_cpp_make_disc, 1},
    {"_IFCip_cpp_make_box", (DL_FUNC) &_IFCip_cpp_make_box, 1},
    {"_IFCip_cpp_make_plus", (DL_FUNC) &_IFCip_cpp_make_plus, 1},
    {"_IFCip_cpp_make_cross", (DL_FUNC) &_IFCip_cpp_make_cross, 1},
    {"_IFCip_cpp_make_diamond", (DL_FUNC) &_IFCip_cpp_make_diamond, 1},
    {"_IFCip_cpp_convexhull", (DL_FUNC) &_IFCip_cpp_convexhull, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_IFCip(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
